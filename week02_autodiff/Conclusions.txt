week02_autodiff (проектирование сети с помощью PyTorch)
    1. Загрузить тренировочные и тестовые данные и их лейблы
    2. Разделить тренировочные данные и их лейблы на батчи
    3. Написать модель сети с помощью torch.nn.Sequential
    4. Инициализировать веса и смещения сети с помощью apply
    5. Указать способ оптимизации/обучения
    6. Повторять в цикле для каждого батча:
        а) запустить модель на данных из текущего батча
        б) применить к результатам softmax
        в) определить значение функции потерь (loss) с помощью categorical cross entropy
        г) выполнить backpropagation для loss
        д) выполнить шаг оптимизации
        е) обнулить градиент
        ж) определить точность классификации
    7. Запустить обученную модель на тестовых данных и вывести точность классификации

    Полезный код для:
    6б) взятие значений softmax для правильных классов - result[range(current_X.shape[0]), current_y]
    6ж) взятие значений наибольших значений softmax и подсчет точности классификации -
        predicted_y = np.argmax(result.detach().numpy(), axis=1)
        train_acc = np.count_nonzero(current_y == predicted_y) / predicted_y.shape[0]
